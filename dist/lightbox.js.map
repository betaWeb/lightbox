{"version":3,"sources":["src/utils.ts","src/Lightbox.ts","index.js"],"names":["globalThis","Lightbox"],"mappings":"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","file":"lightbox.js","sourceRoot":"..","sourcesContent":["export function debounce(callback: Function, delay: number): Function {\n    let timer;\n\n    return function() {\n        let args = arguments\n        let context = this\n\n        clearTimeout(timer)\n\n        timer = setTimeout(() => {\n            callback.apply(context, args)\n        }, delay)\n    }\n}","import './style.css'\nimport {debounce} from \"./utils\";\n\ndeclare type Options = {\n    selector: string\n    lightbox_class: string\n    lightbox_inner_class: string\n    lightbox_legend_class: string\n    lightbox_visible_class: string\n    image_loading_class: string\n    prevent_scroll: boolean\n    prevent_scroll_class: string\n    prevent_scroll_element: HTMLElement\n    inner_offset: number\n}\n\ndeclare type LightboxListItem = {\n    event_handler: Function\n    lightbox?: HTMLDivElement\n    lightbox_inner?: HTMLDivElement\n}\n\ndeclare type AspectRatio = {\n    ratio: number\n    width: number\n    height: number\n    orientation: string\n}\n\nexport default class Lightbox {\n\n    public elements: NodeList\n\n    public options: Options\n\n    private _lightbox: HTMLDivElement\n\n    private _lightbox_inner: HTMLDivElement\n\n    private _list: Map<HTMLElement, LightboxListItem|null> = new Map()\n\n    private _image: HTMLImageElement = null\n\n    public static get default_options(): Options {\n        return {\n            selector: '.lightbox--link',\n            lightbox_class: 'lightbox',\n            lightbox_inner_class: 'lightbox--inner',\n            lightbox_legend_class: 'lightbox--legend',\n            lightbox_visible_class: 'visible',\n            image_loading_class: 'is-loading',\n            prevent_scroll: true,\n            prevent_scroll_class: 'prevent-scroll',\n            prevent_scroll_element: document.body,\n            inner_offset: 30\n        }\n    }\n\n    constructor(options = {}) {\n        this.options = {\n            ...Lightbox.default_options,\n            ...options\n        }\n\n        this.elements = document.querySelectorAll(this.options.selector)\n\n        if (this.elements.length === 0) {\n            return\n        }\n\n        this.hide = this.hide.bind(this)\n        this.onEscape = this.onEscape.bind(this)\n        this.onResize = this.onResize.bind(this)\n\n        this.attachEvents()\n    }\n\n    public async show(src: string): Promise<void> {\n        this._lightbox.classList.add(this.options.image_loading_class)\n\n        this._image = new Image()\n\n        this._image.onload = async () => {\n            await this.setInnerBoundings()\n\n            this._lightbox_inner.style.backgroundImage = `url('${this._image.src}')`\n            this._lightbox.classList.remove(this.options.image_loading_class)\n        }\n\n        this._image.src = src\n\n        if (this.options.prevent_scroll) {\n            this.options.prevent_scroll_element.classList.add(this.options.prevent_scroll_class)\n        }\n\n        this._lightbox.classList.add(this.options.lightbox_visible_class)\n    }\n\n    public hide(): void {\n        this._lightbox.classList.remove(this.options.lightbox_visible_class)\n\n        if (this.options.prevent_scroll) {\n            this.options.prevent_scroll_element.classList.remove(this.options.prevent_scroll_class)\n        }\n\n        this._lightbox_inner.style.backgroundImage = null\n        this._image = null\n\n        this._lightbox.remove()\n    }\n\n    public destroy(): void {\n        const entries = Array.from(this._list.entries())\n\n        if (entries.length > 0) {\n            entries.forEach(([el, {event_handler, lightbox, lightbox_inner}]) => {\n                if (lightbox_inner) {\n                    lightbox_inner.removeEventListener('click', (e: MouseEvent) => e.stopPropagation())\n                    lightbox_inner.remove()\n                }\n\n                if (lightbox) {\n                    lightbox.removeEventListener('click', this.hide)\n                    lightbox.remove()\n                }\n\n                // @ts-ignore\n                el.removeEventListener('click', event_handler)\n            })\n        }\n\n        window.removeEventListener('resize', debounce(this.onResize, 300) as EventListener)\n        window.removeEventListener('keyup', this.onEscape)\n\n        this._lightbox = null\n        this._lightbox_inner = null\n        this._image = null\n        this._list = new Map()\n    }\n\n    private attachEvents(): void {\n        window.addEventListener('resize', debounce(this.onResize, 300) as EventListener)\n        window.addEventListener('keyup', this.onEscape)\n\n        this.elements.forEach(async (el: HTMLElement): Promise<void> => {\n            const event_handler = async _ => await this.onElementClick(el)\n\n            el.addEventListener('click', event_handler)\n\n            this._list.set(el, { event_handler })\n        })\n    }\n\n    private createLightBox(): void {\n        this._lightbox_inner = document.createElement('div')\n        this._lightbox_inner.classList.add(this.options.lightbox_inner_class)\n\n        this._lightbox = document.createElement('div')\n        this._lightbox.classList.add(this.options.lightbox_class)\n        this._lightbox.appendChild(this._lightbox_inner)\n\n        document.body.appendChild(this._lightbox)\n    }\n\n    private createLegend(legend: string): void {\n        const div = document.createElement('div')\n\n        div.classList.add(this.options.lightbox_legend_class)\n        div.innerHTML = legend\n\n        this._lightbox_inner.appendChild(div)\n    }\n\n    private async onElementClick(el: HTMLImageElement|HTMLElement): Promise<void> {\n        const src = el.constructor === HTMLImageElement ? el.src : el.dataset.src\n        const {lightbox_inner, lightbox} = this._list.get(el)\n\n        if (!lightbox) {\n            const legend = el.dataset.legend || null\n\n            this.createLightBox()\n\n            this._lightbox.addEventListener('click', this.hide)\n            this._lightbox_inner.addEventListener('click', (e: MouseEvent) => e.stopPropagation())\n\n            if (legend !== null) {\n                this.createLegend(legend)\n            }\n\n            this._list.set(el, {\n                ...this._list.get(el),\n                lightbox: this._lightbox,\n                lightbox_inner: this._lightbox_inner,\n            })\n        } else {\n            this._lightbox = lightbox\n            this._lightbox_inner = lightbox_inner\n\n            document.body.appendChild(this._lightbox)\n        }\n\n        await this.show(src)\n    }\n\n    private onEscape(e: KeyboardEvent): void {\n        if (e.key === 'Escape') {\n            this.hide()\n        }\n    }\n\n    private async onResize(): Promise<void> {\n        if (this._image !== null) {\n            await this.setInnerBoundings()\n        }\n    }\n\n    private async setInnerBoundings(): Promise<void> {\n        const { naturalWidth, naturalHeight } = this._image\n        const ratio = this.aspectRatioFit(\n            naturalWidth,\n            naturalHeight,\n            window.innerWidth,\n            window.innerHeight\n        ) as AspectRatio\n        const {width, height, orientation} = ratio\n        const { inner_offset } = this.options\n\n        let offsetWidth = 0\n        let offsetHeight = 0\n\n        switch (orientation) {\n            case 'landscape':\n                offsetWidth = inner_offset\n                break\n            case 'portrait':\n                offsetHeight = inner_offset\n                break\n            case 'even':\n                offsetWidth = inner_offset\n                offsetHeight = inner_offset\n                break\n        }\n\n        this._lightbox_inner.style.width = `${width - (2 * offsetWidth)}px`\n        this._lightbox_inner.style.height = `${height - (2 * offsetHeight)}px`\n    }\n\n    private aspectRatioFit(\n        srcWidth: number,\n        srcHeight: number,\n        maxWidth: number,\n        maxHeight: number\n    ): AspectRatio {\n        let ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight)\n        let orientation = 'even'\n\n        if (srcWidth > srcHeight) {\n            orientation ='landscape'\n        } else if (srcWidth < srcHeight) {\n            orientation = 'portrait'\n        }\n\n        let width = srcWidth * ratio\n        let height = srcHeight * ratio\n\n        if (width <= maxWidth || height <= maxHeight) {\n            orientation = 'even'\n        }\n\n        return {\n            ratio,\n            width,\n            height,\n            orientation\n        }\n    }\n}\n","import Lightbox from \"./src/Lightbox\"\n\nglobalThis.Lightbox = Lightbox"]}